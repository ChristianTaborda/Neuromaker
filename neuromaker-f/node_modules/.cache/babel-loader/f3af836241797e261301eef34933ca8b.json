{"ast":null,"code":"var _jsxFileName = \"/home/Cristian/NeuroMarket/neuromarket-f/src/componentes/loginAdmin.jsx\";\n\n/* Por el momento solo se tiene el login como ejemplo */\nimport React, { Component } from 'react';\nimport { Button, Form, Label, FormGroup, Input, CustomInput } from 'reactstrap';\nimport axios from 'axios';\n/*\nLos componentes con estado deben ser clases\nvea un ejemplo de componente sin estado en el\nfooter o header\n*/\n\nclass LoginAdmin extends Component {\n  //Iniciamos los atributos\n  constructor(props) {\n    super(props);\n\n    this.onChange = input => e => {\n      this.setState({\n        [input]: e.target.value\n      });\n    };\n\n    this.state = {\n      password: \"\",\n      nick: \"\"\n    }; //Esto es necesario para la identificacion de funciones\n\n    this.enviar = this.enviar.bind(this);\n    this.onChange = this.onChange.bind(this);\n  } //FUncion que obtiene y cambia un stributo del estado\n\n\n  //Funcion ejemplo para hacer solicitud al servidor\n  enviar() {\n    const mensaje = {\n      nick: this.state.nick,\n      clave: this.state.password //Axios se encarga de hacer solicitudes de forma sencilla\n\n    };\n    axios.post('http://localhost:4000/admins/login', mensaje).then(response => {\n      this.props.login(response.data);\n    });\n  } //El metodo render es obligario para los componentes con estado\n\n\n  render() {\n    //Aqui podemos hacer validaciones para retonar diferentes cosas\n    //El metodo retunr es necesario\n    return React.createElement(Form, {\n      className: \"formulario\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Ingrese su usuario\"), React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      onChange: this.onChange('nick'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Contrase\\xF1a de acceso\"), React.createElement(Input, {\n      type: \"password\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      onChange: this.onChange('password'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(CustomInput, {\n      type: \"checkbox\",\n      id: \"exampleCustomCheckbox\",\n      label: \"Recordar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.enviar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Iniciar\")));\n  }\n\n}\n\nexport default LoginAdmin;","map":{"version":3,"sources":["/home/Cristian/NeuroMarket/neuromarket-f/src/componentes/loginAdmin.jsx"],"names":["React","Component","Button","Form","Label","FormGroup","Input","CustomInput","axios","LoginAdmin","constructor","props","onChange","input","e","setState","target","value","state","password","nick","enviar","bind","mensaje","clave","post","then","response","login","data","render"],"mappings":"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","sourcesContent":["/* Por el momento solo se tiene el login como ejemplo */\nimport React, { Component } from 'react'\nimport { Button, Form, Label, FormGroup, Input, CustomInput } from 'reactstrap';\nimport axios from 'axios'\n\n/*\nLos componentes con estado deben ser clases\nvea un ejemplo de componente sin estado en el\nfooter o header\n*/\n\nclass LoginAdmin extends Component {\n\n  //Iniciamos los atributos\n  constructor(props) {\n    super(props)\n    this.state = {\n      password: \"\",\n      nick: \"\"\n    };\n    //Esto es necesario para la identificacion de funciones\n    this.enviar = this.enviar.bind(this);\n    this.onChange = this.onChange.bind(this) \n  }\n\n  //FUncion que obtiene y cambia un stributo del estado\n  onChange = input => e =>{ \n    this.setState({ [input]: e.target.value});\n  }  \n\n  //Funcion ejemplo para hacer solicitud al servidor\n  enviar() {\n    const mensaje = {\n      nick: this.state.nick,\n      clave: this.state.password\n      \n    }\n\n    //Axios se encarga de hacer solicitudes de forma sencilla\n    axios.post('http://localhost:4000/admins/login', mensaje)\n    .then((response) => {\n      this.props.login(response.data);\n    })\n  }\n\n  //El metodo render es obligario para los componentes con estado\n  render() {\n\n    //Aqui podemos hacer validaciones para retonar diferentes cosas\n\n    //El metodo retunr es necesario\n    return (\n        <Form className=\"formulario\">\n          <FormGroup>\n            <Label>Ingrese su usuario</Label>\n            <Input type=\"email\" name=\"email\" id=\"exampleEmail\" onChange = {this.onChange('nick')} />                         \n            {/*<Form.Text className=\"text-muted\">\n              We'll never share your email with anyone else.\n            </Form.Text>\n            */}\n          </FormGroup>\n            <br/>\n          <FormGroup>\n          <Label>Contrase√±a de acceso</Label>\n            <Input type=\"password\" name=\"email\" id=\"exampleEmail\" onChange = {this.onChange('password')} />                                   \n          </FormGroup>\n          <FormGroup>\n          <CustomInput type=\"checkbox\" id=\"exampleCustomCheckbox\" label=\"Recordar\" />            \n          </FormGroup>\n          <div className=\"center\">\n            <Button color=\"danger\" onClick={this.enviar}>\n              Iniciar\n            </Button>\n          </div>\n        </Form>\n    );\n  }\n}\n\nexport default LoginAdmin;"]},"metadata":{},"sourceType":"module"}