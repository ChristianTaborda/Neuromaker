{"ast":null,"code":"import Producto from '../modelos/producto';\nexport async function registrarProducto(req, res) {\n  const _req$body = req.body,\n        id = _req$body.id,\n        nombre = _req$body.nombre,\n        imagen = _req$body.imagen,\n        descripcion = _req$body.descripcion,\n        categoria = _req$body.categoria,\n        costo = _req$body.costo,\n        descuento = _req$body.descuento,\n        id_vendedor = _req$body.id_vendedor,\n        existencias = _req$body.existencias;\n\n  try {\n    let newProducto = await Producto.create({\n      id,\n      nombre,\n      imagen,\n      descripcion,\n      categoria,\n      costo,\n      descuento,\n      id_vendedor,\n      existencias\n    }, {\n      fields: ['id', 'nombre', 'imagen', 'descripcion', 'categoria', 'costo', 'descuento', 'id_vendedor', 'existencias']\n    });\n\n    if (newProducto) {\n      return res.json({\n        mensaje: 'Producto creado exitosamente',\n        datos: newProducto\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({\n      mensaje: 'no se pudo crear producto',\n      data: {}\n    });\n  }\n\n  res.send('recibido');\n}\nexport async function traerProducto(req, res) {\n  const _req$body2 = req.body,\n        nombre = _req$body2.nombre,\n        costo = _req$body2.costo,\n        categoria = _req$body2.categoria,\n        imagen = _req$body2.imagen,\n        descripcion = _req$body2.descripcion;\n\n  try {\n    const busquedaProducto = await Producto.findAll({\n      attributes: ['nombre', 'costo', 'categoria', 'imagen', 'descripcion'],\n      where: {}\n    });\n\n    if (busquedaProducto) {\n      return res.json({\n        mensaje: 'Producto encontrado',\n        data: busquedaProducto\n      });\n    } else {\n      return res.json({\n        mensaje: 'Producto no encontrado',\n        data: {}\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"sources":["/home/Cristian/NeuroMarket/neuromarket-f/src/controladores/dao.producto.js"],"names":["Producto","registrarProducto","req","res","body","id","nombre","imagen","descripcion","categoria","costo","descuento","id_vendedor","existencias","newProducto","create","fields","json","mensaje","datos","error","console","log","status","data","send","traerProducto","busquedaProducto","findAll","attributes","where"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AAEA,OAAO,eAAeC,iBAAf,CAAiCC,GAAjC,EAAsCC,GAAtC,EAA2C;AAAA,oBAW1CD,GAAG,CAACE,IAXsC;AAAA,QAE1CC,EAF0C,aAE1CA,EAF0C;AAAA,QAG1CC,MAH0C,aAG1CA,MAH0C;AAAA,QAI1CC,MAJ0C,aAI1CA,MAJ0C;AAAA,QAK1CC,WAL0C,aAK1CA,WAL0C;AAAA,QAM1CC,SAN0C,aAM1CA,SAN0C;AAAA,QAO1CC,KAP0C,aAO1CA,KAP0C;AAAA,QAQ1CC,SAR0C,aAQ1CA,SAR0C;AAAA,QAS1CC,WAT0C,aAS1CA,WAT0C;AAAA,QAU1CC,WAV0C,aAU1CA,WAV0C;;AAY9C,MAAI;AACA,QAAIC,WAAW,GAAG,MAAMd,QAAQ,CAACe,MAAT,CAAgB;AACpCV,MAAAA,EADoC;AAEpCC,MAAAA,MAFoC;AAGpCC,MAAAA,MAHoC;AAIpCC,MAAAA,WAJoC;AAKpCC,MAAAA,SALoC;AAMpCC,MAAAA,KANoC;AAOpCC,MAAAA,SAPoC;AAQpCC,MAAAA,WARoC;AASpCC,MAAAA;AAToC,KAAhB,EAUrB;AACCG,MAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,QAAP,EAAiB,QAAjB,EAA2B,aAA3B,EAA0C,WAA1C,EAAuD,OAAvD,EAAgE,WAAhE,EAA6E,aAA7E,EAA4F,aAA5F;AADT,KAVqB,CAAxB;;AAaA,QAAIF,WAAJ,EAAiB;AACb,aAAOX,GAAG,CAACc,IAAJ,CAAS;AACZC,QAAAA,OAAO,EAAE,8BADG;AAEZC,QAAAA,KAAK,EAAEL;AAFK,OAAT,CAAP;AAIH;AACJ,GApBD,CAoBE,OAAOM,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAjB,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AACjBC,MAAAA,OAAO,EAAE,2BADQ;AAEjBM,MAAAA,IAAI,EAAE;AAFW,KAArB;AAIH;;AACDrB,EAAAA,GAAG,CAACsB,IAAJ,CAAS,UAAT;AACH;AAED,OAAO,eAAeC,aAAf,CAA6BxB,GAA7B,EAAkCC,GAAlC,EAAuC;AAAA,qBAOtCD,GAAG,CAACE,IAPkC;AAAA,QAEtCE,MAFsC,cAEtCA,MAFsC;AAAA,QAGtCI,KAHsC,cAGtCA,KAHsC;AAAA,QAItCD,SAJsC,cAItCA,SAJsC;AAAA,QAKtCF,MALsC,cAKtCA,MALsC;AAAA,QAMtCC,WANsC,cAMtCA,WANsC;;AAQ1C,MAAI;AACA,UAAMmB,gBAAgB,GAAG,MAAM3B,QAAQ,CAAC4B,OAAT,CAAiB;AAC5CC,MAAAA,UAAU,EAAE,CAAC,QAAD,EACR,OADQ,EAER,WAFQ,EAGR,QAHQ,EAIR,aAJQ,CADgC;AAO5CC,MAAAA,KAAK,EAAE;AAPqC,KAAjB,CAA/B;;AAWA,QAAIH,gBAAJ,EAAsB;AAClB,aAAOxB,GAAG,CAACc,IAAJ,CAAS;AACZC,QAAAA,OAAO,EAAE,qBADG;AAEZM,QAAAA,IAAI,EAAEG;AAFM,OAAT,CAAP;AAIH,KALD,MAKO;AACH,aAAOxB,GAAG,CAACc,IAAJ,CAAS;AACZC,QAAAA,OAAO,EAAE,wBADG;AAEZM,QAAAA,IAAI,EAAE;AAFM,OAAT,CAAP;AAIH;AACJ,GAvBD,CAuBE,OAAOJ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ","sourcesContent":["import Producto from '../modelos/producto';\r\n\r\nexport async function registrarProducto(req, res) {\r\n    const {\r\n        id,\r\n        nombre,\r\n        imagen,\r\n        descripcion,\r\n        categoria,\r\n        costo,\r\n        descuento,\r\n        id_vendedor,\r\n        existencias\r\n    } = req.body;\r\n    try {\r\n        let newProducto = await Producto.create({\r\n            id,\r\n            nombre,\r\n            imagen,\r\n            descripcion,\r\n            categoria,\r\n            costo,\r\n            descuento,\r\n            id_vendedor,\r\n            existencias\r\n        }, {\r\n            fields: ['id', 'nombre', 'imagen', 'descripcion', 'categoria', 'costo', 'descuento', 'id_vendedor', 'existencias']\r\n        });\r\n        if (newProducto) {\r\n            return res.json({\r\n                mensaje: 'Producto creado exitosamente',\r\n                datos: newProducto\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.status(500).json({\r\n            mensaje: 'no se pudo crear producto',\r\n            data: {}\r\n        });\r\n    }\r\n    res.send('recibido');\r\n}\r\n\r\nexport async function traerProducto(req, res) {\r\n    const {\r\n        nombre,\r\n        costo,\r\n        categoria,\r\n        imagen,\r\n        descripcion\r\n    } = req.body;\r\n    try {\r\n        const busquedaProducto = await Producto.findAll({\r\n            attributes: ['nombre',\r\n                'costo',\r\n                'categoria',\r\n                'imagen',\r\n                'descripcion'\r\n            ],\r\n            where: {\r\n\r\n            }\r\n        });\r\n        if (busquedaProducto) {\r\n            return res.json({\r\n                mensaje: 'Producto encontrado',\r\n                data: busquedaProducto\r\n            })\r\n        } else {\r\n            return res.json({\r\n                mensaje: 'Producto no encontrado',\r\n                data: {}\r\n            })\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}